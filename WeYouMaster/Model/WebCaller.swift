//
//  WebCaller.swift
//  WeYouMaster
//
//  Created by alireza on 8/11/18.
//  Copyright Â© 2018 alireza. All rights reserved.
//

import Foundation
public class WebCaller {
    
    static func getCollection(_ items_per_page : Int ,_ startPage :Int ,
                              owner : String  , userId : String ,state : String ,
                              completionHandler: @escaping (CollectionList?, Error?) -> Void){
        let endpoint = "https://www.weyoumaster.com/api/collections/"
        
        guard let url = URL(string: endpoint)
            else {
                print("Error: cannot create URL")
                let error = BackendError.urlError(reason: "Could not construct URL")
                completionHandler(nil, error)
                return
        }
        var urlRequest = URLRequest(url: url)
        urlRequest.httpMethod = "POST"
        let postString = "items_per_page=" + String(items_per_page) + "&startPage=" + String(startPage) +
            "&owner=" + owner  + "&userId=" + userId
        + "&randomStatus=" + state
        urlRequest.httpBody = postString.data(using: String.Encoding.utf8)
        
        // Make request
        let session = URLSession.shared
        let task = session.dataTask(with: urlRequest, completionHandler: {
            (data, response, error) in
            // handle response to request
            // check for error
            guard error == nil else {
                completionHandler(nil, error!)
                return
            }
            // make sure we got data in the response
            guard let responseData = data else {
                print("Error: did not receive data")
                let error = BackendError.objectSerialization(reason: "No data in response")
                completionHandler(nil, error)
                return
            }
            
            // parse the result as JSON
            // then create a Todo from the JSON
            do {
                
                let  collectionL  = try JSONDecoder().decode(CollectionList.self,from: responseData)
                completionHandler(collectionL,nil)
                
            } catch {
                // error trying to convert the data to JSON using JSONSerialization.jsonObject
                completionHandler(nil, error)
                return
            }
        })
        task.resume()
    }
    

    
    static func getCollectionOther(_ items_per_page : Int ,_ startPage :Int ,
                              owner : String  , userId : String ,
                              completionHandler: @escaping (CollectionOtherList?, Error?) -> Void){
        let endpoint = "https://www.weyoumaster.com/api/dashboard_collections"
        
        guard let url = URL(string: endpoint)
            else {
                print("Error: cannot create URL")
                let error = BackendError.urlError(reason: "Could not construct URL")
                completionHandler(nil, error)
                return
        }
        var urlRequest = URLRequest(url: url)
        urlRequest.httpMethod = "POST"
        let postString = "items_per_page=" + String(items_per_page) + "&startPage=" + String(startPage) +
             "&userId=" + userId
        urlRequest.httpBody = postString.data(using: String.Encoding.utf8)
        
        // Make request
        let session = URLSession.shared
        let task = session.dataTask(with: urlRequest, completionHandler: {
            (data, response, error) in
            // handle response to request
            // check for error
            guard error == nil else {
                completionHandler(nil, error!)
                return
            }
            // make sure we got data in the response
            guard let responseData = data else {
                print("Error: did not receive data")
                let error = BackendError.objectSerialization(reason: "No data in response")
                completionHandler(nil, error)
                return
            }
            
            // parse the result as JSON
            // then create a Todo from the JSON
            do {
                
                let  collectionL  = try JSONDecoder().decode(CollectionOtherList.self,from:responseData)
                completionHandler(collectionL,nil)
                
            } catch {
                // error trying to convert the data to JSON using JSONSerialization.jsonObject
                completionHandler(nil, error)
                return
            }
        })
        task.resume()
    }
    
    
    
    
    static func getFeeds(_ per_page: Int ,_ current_page: Int,_ viewer_id :String , completionHandler: @escaping (ContentList?, Error?) -> Void) {
        let endpoint = "https://www.weyoumaster.com/api/feed"
        guard let url = URL(string: endpoint)
            else {
                print("Error: cannot create URL")
                let error = BackendError.urlError(reason: "Could not construct URL")
                completionHandler(nil, error)
                return
        }
        var urlRequest = URLRequest(url: url)
        urlRequest.httpMethod = "POST"
        let postString = "itemPerPage=" + String(per_page) + "&currentPage=" + String(current_page) +
            "&viewer_id=" + viewer_id
        urlRequest.httpBody = postString.data(using: String.Encoding.utf8)
        
        
        let session = URLSession.shared
        let task = session.dataTask(with: urlRequest, completionHandler: {
            (data, response, error) in
            // handle response to request
            // check for error
            guard error == nil else {
                completionHandler(nil, error!)
                return
            }
            // make sure we got data in the response
            guard let responseData = data else {
                print("Error: did not receive data")
                let error = BackendError.objectSerialization(reason: "No data in response")
                completionHandler(nil, error)
                return
            }
            
            // parse the result as JSON
            // then create a Todo from the JSON
            do {
                print(responseData)
                let  contentL  = try JSONDecoder().decode(ContentList.self,from: responseData)
                completionHandler(contentL,nil)
                
            } catch {
                // error trying to convert the data to JSON using JSONSerialization.jsonObject
                completionHandler(nil, error)
                return
            }
        })
        task.resume()
        
        
    }
    
    
    static func getUserFeed(_ per_page: Int ,_ current_page: Int,_ owner :String , completionHandler: @escaping (OtherContentList?, Error?) -> Void) {
        let endpoint = "https://www.weyoumaster.com/api/my_contributions"
        guard let url = URL(string: endpoint)
            else {
                print("Error: cannot create URL")
                let error = BackendError.urlError(reason: "Could not construct URL")
                completionHandler(nil, error)
                return
        }
        var urlRequest = URLRequest(url: url)
        urlRequest.httpMethod = "POST"
        let postString = "owner=" + owner
        urlRequest.httpBody = postString.data(using: String.Encoding.utf8)
        
        
        let session = URLSession.shared
        let task = session.dataTask(with: urlRequest, completionHandler: {
            (data, response, error) in
            // handle response to request
            // check for error
            guard error == nil else {
                completionHandler(nil, error!)
                return
            }
            // make sure we got data in the response
            guard let responseData = data else {
                print("Error: did not receive data")
                let error = BackendError.objectSerialization(reason: "No data in response")
                completionHandler(nil, error)
                return
            }
            
            // parse the result as JSON
            // then create a Todo from the JSON
            do {
                print(responseData)
                let  contentL  = try JSONDecoder().decode(OtherContentList.self,from: responseData)
                completionHandler(contentL,nil)
                
            } catch {
                // error trying to convert the data to JSON using JSONSerialization.jsonObject
                completionHandler(nil, error)
                return
            }
        })
        task.resume()
        
        
    }
    
    static func getFeedsOfCollection(_ collectionId :String , completionHandler: @escaping (CollectionPost?, Error?) -> Void) {
        let endpoint = "https://www.weyoumaster.com/api/contributions_of_a_collection"
        guard let url = URL(string: endpoint)
            else {
                print("Error: cannot create URL")
                let error = BackendError.urlError(reason: "Could not construct URL")
                completionHandler(nil, error)
                return
        }
        var urlRequest = URLRequest(url: url)
        urlRequest.httpMethod = "POST"
        let postString = "collectionId=" + collectionId
        urlRequest.httpBody = postString.data(using: String.Encoding.utf8)
        
        
        let session = URLSession.shared
        let task = session.dataTask(with: urlRequest, completionHandler: {
            (data, response, error) in
            // handle response to request
            // check for error
            guard error == nil else {
                completionHandler(nil, error!)
                return
            }
            // make sure we got data in the response
            guard let responseData = data else {
                print("Error: did not receive data")
                let error = BackendError.objectSerialization(reason: "No data in response")
                completionHandler(nil, error)
                return
            }
            
            // parse the result as JSON
            // then create a Todo from the JSON
            do {
                print(responseData)
                let  collectionPost  = try JSONDecoder().decode(CollectionPost.self,from: responseData)
            
                completionHandler(collectionPost,nil)
                
            } catch {
                // error trying to convert the data to JSON using JSONSerialization.jsonObject
                completionHandler(nil, error)
                return
            }
        })
        task.resume()
        
        
    }
    static func getLikes(_ per_page: Int ,_ current_page: Int,_ owner:String , completionHandler: @escaping (LikeList?, Error?) -> Void) {
        let endpoint = "https://www.weyoumaster.com/api/my_notifications"
        guard let url = URL(string: endpoint)
            else {
                print("Error: cannot create URL")
                let error = BackendError.urlError(reason: "Could not construct URL")
                completionHandler(nil, error)
                return
        }
        var urlRequest = URLRequest(url: url)
        urlRequest.httpMethod = "POST"
          let postString = "itemPerPage=" + String(per_page) + "&currentPage=" + String(current_page) + "&owner=" + owner
        
         urlRequest.httpBody = postString.data(using: String.Encoding.utf8)
        
        
        let session = URLSession.shared
        let task = session.dataTask(with: urlRequest, completionHandler: {
            (data, response, error) in
            // handle response to request
            // check for error
            guard error == nil else {
                completionHandler(nil, error!)
                return
            }
            // make sure we got data in the response
            guard let responseData = data else {
                print("Error: did not receive data")
                let error = BackendError.objectSerialization(reason: "No data in response")
                completionHandler(nil, error)
                return
            }
            
            // parse the result as JSON
            // then create a Todo from the JSON
            do {
                print(responseData)
                let  contentL  = try JSONDecoder().decode(LikeList.self,from: responseData)
                completionHandler(contentL,nil)
                
            } catch {
                // error trying to convert the data to JSON using JSONSerialization.jsonObject
                completionHandler(nil, error)
                return
            }
        })
        task.resume()
        
        
    }
    
    static func likeAndDisLike(_ like_status: Int ,_ liker_id: String,_ postId:String , liked_id : String , completionHandler: @escaping (Int?, Error?) -> Void) {
        let endpoint = "https://www.weyoumaster.com/api/like_dislike"
        guard let url = URL(string: endpoint)
            else {
                print("Error: cannot create URL")
                let error = BackendError.urlError(reason: "Could not construct URL")
                completionHandler(nil, error)
                return
        }
        var urlRequest = URLRequest(url: url)
        urlRequest.httpMethod = "POST"
        let postString = "like_status=" + String(like_status) + "&liker_id=" + liker_id + "&postId=" + postId + "&liked_id=" + liked_id
        urlRequest.httpBody = postString.data(using: String.Encoding.utf8)
        
        
        let session = URLSession.shared
        let task = session.dataTask(with: urlRequest, completionHandler: {
            (data, response, error) in
            // handle response to request
            // check for error
            guard error == nil else {
                completionHandler(nil, error!)
                return
            }
            // make sure we got data in the response
            guard let responseData = data else {
                print("Error: did not receive data")
                let error = BackendError.objectSerialization(reason: "No data in response")
                completionHandler(nil, error)
                return
            }
            
            // parse the result as JSON
            // then create a Todo from the JSON
            
                print(responseData)
                
                completionHandler(1,nil)
                
            
        })
        task.resume()
        
        
    }
    
    
    
    static func followDisFollow(_ follow_status: Int ,_ follower_id: String,_ followed_id : String , completionHandler: @escaping (Int?, Error?) -> Void) {
        let endpoint = "https://www.weyoumaster.com/api/follow_unfollow"
        guard let url = URL(string: endpoint)
            else {
                print("Error: cannot create URL")
                let error = BackendError.urlError(reason: "Could not construct URL")
                completionHandler(nil, error)
                return
        }
        var urlRequest = URLRequest(url: url)
        urlRequest.httpMethod = "POST"
        let postString = "follow_status=" + String(follow_status) + "&follower_id=" + follower_id + "&followed_id=" + followed_id
        urlRequest.httpBody = postString.data(using: String.Encoding.utf8)
        
        
        let session = URLSession.shared
        let task = session.dataTask(with: urlRequest, completionHandler: {
            (data, response, error) in
            // handle response to request
            // check for error
            guard error == nil else {
                completionHandler(nil, error!)
                return
            }
            // make sure we got data in the response
            guard let responseData = data else {
                print("Error: did not receive data")
                let error = BackendError.objectSerialization(reason: "No data in response")
                completionHandler(nil, error)
                return
            }
            
            // parse the result as JSON
            // then create a Todo from the JSON
            
            print(responseData)
            
            completionHandler(1,nil)
            
            
        })
        task.resume()
        
        
    }
    static func signIn(_ first_name:String,_ last_name : String ,
                       _ mobile : String ,_ email_address : String,_ job_position : String ,_ password : String ,_ country : String  , completionHandler : @escaping (RegisterResponse?,Error?)->Void ){
        let endPoint = "https://www.weyoumaster.com/api/signup"
        guard let url = URL(string: endPoint)
            else
        {
            print("Error: cannot create URL")
            let error = BackendError.urlError(reason: "Could not construct URL")
            completionHandler(nil, error)
            return
        }
        
        var urlRequest = URLRequest(url: url)
        urlRequest.httpMethod = "POST"
        let postString = "first_name=" + first_name + "&last_name=" + last_name  + "&mobile=" + mobile + "&email_address=" + email_address + "&job_position=" + job_position + "&password=" + password + "&country=" + country
        
        urlRequest.httpBody = postString.data(using: String.Encoding.utf8)
        
        
        let session = URLSession.shared
        let task = session.dataTask(with: urlRequest, completionHandler: {
            (data, response, error) in
            // handle response to request
            // check for error
            guard error == nil else {
                completionHandler(nil, error!)
                return
            }
            // make sure we got data in the response
            guard let responseData = data else {
                print("Error: did not receive data")
                let error = BackendError.objectSerialization(reason: "No data in response")
                completionHandler(nil, error)
                return
            }
            
            // parse the result as JSON
            // then create a Todo from the JSON
            do {
                print(responseData)
                let  contentL  = try JSONDecoder().decode(RegisterResponse.self,from: responseData)
                completionHandler(contentL,nil)
                
            } catch {
                // error trying to convert the data to JSON using JSONSerialization.jsonObject
                completionHandler(nil, error)
                return
            }
        })
        task.resume()
        
        
    }
    
    
    static func getNotif(_ owner:String, completionHandler : @escaping (NotifResponse?,Error?)->Void ){
        let endPoint = "https://www.weyoumaster.com/api/notif_status/"
        guard let url = URL(string: endPoint)
            else
        {
            print("Error: cannot create URL")
            let error = BackendError.urlError(reason: "Could not construct URL")
            completionHandler(nil, error)
            return
        }
        
        var urlRequest = URLRequest(url: url)
        urlRequest.httpMethod = "POST"
        let postString = "owner=" + owner
        
        urlRequest.httpBody = postString.data(using: String.Encoding.utf8)
        
        
        let session = URLSession.shared
        let task = session.dataTask(with: urlRequest, completionHandler: {
            (data, response, error) in
            // handle response to request
            // check for error
            guard error == nil else {
                completionHandler(nil, error!)
                return
            }
            // make sure we got data in the response
            guard let responseData = data else {
                print("Error: did not receive data")
                let error = BackendError.objectSerialization(reason: "No data in response")
                completionHandler(nil, error)
                return
            }
            
            // parse the result as JSON
            // then create a Todo from the JSON
            do {
                print(responseData)
                let  contentL  = try JSONDecoder().decode(NotifResponse.self,from: responseData)
                completionHandler(contentL,nil)
                
            } catch {
                // error trying to convert the data to JSON using JSONSerialization.jsonObject
                completionHandler(nil, error)
                return
            }
        })
        task.resume()
        
        
    }
    
    
    static func getLogin(_ email: String ,_ pass: String, completionHandler: @escaping (LoginResponse?, Error?) -> Void) {
        // set up URLRequest with URL
        let endpoint = "https://www.weyoumaster.com/api/login/"
        guard let url = URL(string: endpoint)
            else {
            print("Error: cannot create URL")
            let error = BackendError.urlError(reason: "Could not construct URL")
            completionHandler(nil, error)
            return
        }
        var urlRequest = URLRequest(url: url)
        urlRequest.httpMethod = "POST"
        let postString = "emailaddress=" + email + "&password=" + pass
        urlRequest.httpBody = postString.data(using: String.Encoding.utf8)

        // Make request
        let session = URLSession.shared
        let task = session.dataTask(with: urlRequest, completionHandler: {
            (data, response, error) in
            // handle response to request
            // check for error
            guard error == nil else {
                completionHandler(nil, error!)
                return
            }
            // make sure we got data in the response
            guard let responseData = data else {
                print("Error: did not receive data")
                let error = BackendError.objectSerialization(reason: "No data in response")
                completionHandler(nil, error)
                return
            }
            
            // parse the result as JSON
            // then create a Todo from the JSON
            do {
                if let todoJSON = try JSONSerialization.jsonObject(with: responseData, options: []) as? [String: Any],
                    let todo = LoginResponse(json: todoJSON) {
                
                    // created a TODO object
                    completionHandler(todo, nil)
                } else {
                    // couldn't create a todo object from the JSON
                    let error = BackendError.objectSerialization(reason: "Couldn't create a todo object from the JSON")
                    completionHandler(nil, error)
                }
            } catch {
                // error trying to convert the data to JSON using JSONSerialization.jsonObject
                completionHandler(nil, error)
                return
            }
        })
        task.resume()
    }
    
    
    
  
    
    
    static func saveFeed(owner: String , location : String , publicState : Int, align : Int , contentType : Int , collectionId : Int, title : String , description : String , link : String , apparatLink : String,
                         youtubeLink : String,insertTimeStamp : Int64 , completionHandler: @escaping (NormalResponse?, Error?) -> Void){
        
        
        // set up URLRequest with URL
        let endpoint = "https://www.weyoumaster.com/api/add_contribution"
        guard let url = URL(string: endpoint)
            else {
                print("Error: cannot create URL")
                let error = BackendError.urlError(reason: "Could not construct URL")
                completionHandler(nil, error)
                return
        }
        
        var urlRequest = URLRequest(url: url)
        urlRequest.httpMethod = "POST"
        var postString = "";
        postString.append("owner=")
        postString.append(owner)
        postString.append("&location=")
        postString.append(location)
        postString.append("&publicState=")
        postString.append(String(publicState))
        let b = "&title="
        postString.append(b)
        postString.append(title)
        postString.append("&align=")
        postString.append(String(align))
        postString.append("&contentType=")
        let a = String(contentType)
        postString.append(a)
        postString.append("&description=")
        postString.append(description)
        postString.append("&link=")
        postString.append(link)
        postString.append("&apparatLink=")
        postString.append(apparatLink)
        postString.append("&youtubeLink=")
        postString.append(youtubeLink)
        postString.append("&insertTimeStamp=")
        postString.append(String(insertTimeStamp))
        

        
        
        urlRequest.httpBody = postString.data(using: String.Encoding.utf8)
        
        // Make request
        let session = URLSession.shared
        let task = session.dataTask(with: urlRequest, completionHandler: {
            (data, response, error) in
            // handle response to request
            // check for error
            guard error == nil else {
                completionHandler(nil, error!)
                return
            }
            // make sure we got data in the response
            guard let responseData = data else {
                print("Error: did not receive data")
                let error = BackendError.objectSerialization(reason: "No data in response")
                completionHandler(nil, error)
                return
            }
            
            // parse the result as JSON
            // then create a Todo from the JSON
            do {
                print(responseData)
                let  resp  = try JSONDecoder().decode(NormalResponse.self,from: responseData)
                completionHandler(resp,nil)
                
            } catch {
                // error trying to convert the data to JSON using JSONSerialization.jsonObject
                completionHandler(nil, error)
                return
            }
        })
        task.resume()
        
        
        
    }
    
   static func makeQaList() -> [QA] {
        var qaQastions = [QA]()
        qaQastions.append(QA(title: "ÚØ±Ø§ ÙÙ Ø¨Ù Ø§ÛÙ Ø³ÛØ³ØªÙ Ø¯Ø¹ÙØª Ø´Ø¯Ù Ø§ÙØ", description: "ÙØ§ ØªÙØ§ÛÙ Ø¯Ø§Ø±ÛÙ Ø¨Ø§ Ú©Ø§Ø±Ø´ÙØ§Ø³Ø§Ù Ù ÙØ¯ÛØ±Ø§ÙÛ Ú©Ù ØªØ¬Ø§Ø±Ø¨ Ø¨ÛÙ Ø§ÙÙÙÙÛ Ø¯Ø§Ø±ÙØ¯ - ÙÙÚÙÙ Ø®ÙØ¯ Ø´ÙØ§ - Ø§Ø±ØªØ¨Ø§Ø· Ø¨Ø±ÙØ±Ø§Ø± ÙÙÙØ¯Ù Ù Ø¯ÛØ¯Ú¯Ø§Ù Ø¢ÙØ§Ù Ø±Ø§ Ø¯Ø± Ø±Ø§Ø¨Ø·Ù Ø¨Ø§ Ø§ÛØ¯Ù Ø§ÙÙÛÙ ÙÛÙÙØ³ØªØ± Ù ÙØ­ÙÙ Ø§Ø¬Ø±Ø§Û Ø¢Ù Ø¨Ø¯Ø§ÙÛÙ. Ø§ÛÙ Ø¨Ù ÙØ§ Ú©ÙÚ© Ø´Ø§ÛØ§ÙÛ Ø®ÙØ§ÙØ¯ ÙÙÙØ¯ ØªØ§ Ø³ÛØ³ØªÙÛ Ø¨Û ÙÙØµ Ø±Ø§ Ø¯Ø± Ø§Ø®ØªÛØ§Ø± Ú©Ø§Ø±Ø¨Ø±Ø§Ù ÙØ±Ø§Ø± Ø¯ÙÛÙ. ÙÛÙÙØ³ØªØ± ØªÙØ§ÛÙ Ø¯Ø§Ø±Ø¯ ØªØ§ ÙÛØ¯Ø¨Ú© Ø§Ø±Ø²Ø´ÙÙØ¯ Ø´ÙØ§ Ø±Ø§ Ø¯Ø± Ø±Ø§Ø¨Ø·Ù Ø¨Ø§ ÙÛØ²Ø§Ù Ø§Ø«Ø±Ø¨Ø®Ø´Û Ø§ÛÙ Ø³ÛØ³ØªÙ Ù Ø§Ø­ØªÙØ§Ù ÙÙÙÙÛØª Ø¢Ù Ø¯Ø± Ø¨ÛÙ ÙØ§Ø±Ø³Û Ø²Ø¨Ø§ÙØ§Ù Ø¨Ø¯Ø§ÙØ¯"))
        
        var a = "ÙÛÙÙØ³ØªØ± ÛØ§ View-Master Ø¯Ø± Ú¯Ø°Ø´ØªÙ Ø§Ø¨Ø²Ø§Ø±Û Ø¨Ø±Ø§Û ØªÙØ§Ø´Ø§Û Ø¯ÙÛØ§Û ÙØ±ÙÚ¯ Ø¨ÙØ¯. Ø§Ø¨Ø²Ø§Ø±Û Ø´Ø¨ÛÙ ÛÚ© Ø¯ÙØ±Ø¨ÛÙ Ú©Ù Ø¨Ø§ ÙØ´Ø±Ø¯Ù Ø¯Ú©ÙÙ Ø³ÙØª Ø±Ø§Ø³Øª Ø¢ÙØ Ø¹Ú©Ø³âÙØ§Û Ø¯Ø§Ø®Ù Ø¢Ù - Ú©Ù Ø¹ÙØ¯ØªØ§ ØªØµØ§ÙÛØ± Ø´ÙØ±ÙØ§Û ÙØ¯Ø±Ù Ø¯ÙÛØ§ Ø¨ÙØ¯ - ØªØ¹ÙÛØ¶ ÙÛâØ´Ø¯ ."
        var b = "ÙØ¯Ù ÙÙØ§Ø¦Û Ù¾Ø±ÙÚÙâØ§Û Ú©Ù ÙØ§ Ø¨Ù Ø¯ÙØ¨Ø§Ù Ø§Ø¬Ø±Ø§ÛØ´ Ø¨ÙØ¯ÛÙ Ø¨Ù ØµÙØ±Øª ÙÙØ§Ø¯ÛÙ Ù Ø¨Ù Ø·Ø±Ø² Ø¹Ø¬ÛØ¨ÛØ View-Master Ø±Ø§ Ø¯Ø± Ø°ÙÙ ÙØ§ ØªØ¯Ø§Ø¹Û Ú©Ø±Ø¯ ."
        
        
        var c = "Ø¯ÙØ§ÛÙ ÙØ±ØªØ¨Ø· Ø¨Ø§ Ø­ÙÙÙ Ú©Ù¾Û Ø±Ø§ÛØªØ ÙØ§ Ø±Ø§ ÙØ¬Ø¨ÙØ± ÙÙÙØ¯ Ú©Ù ÙØ­ÙÙ ÙÚ¯Ø§Ø±Ø´ ÙÛÙÙØ³ØªØ± Ø¨Ù Ø²Ø¨Ø§Ù Ø§ÙÚ¯ÙÛØ³Û Ø±Ø§ Ú©ÙÛ ØªØºÛÛØ± Ø¯Ø§Ø¯Ù Ù Ø§ÛÙ Ù¾Ø±ÙÚÙ Ø±Ø§ Ø¨Ù ØµÙØ±Øª WeYouMaster Ø¨Ù Ø¯ÙÛØ§ ÙØ¹Ø±ÙÛ ÙÙØ§Ø¦ÛÙ. Ø´Ø§ÛØ¯ Ø§ÛÙ Ø¹ÙÙØ§Ù ØªØ¯Ø§Ø¹ÛâÚ¯Ø± Ø¢Ù Ø¨Ø§Ø´Ø¯ Ú©Ù Ø§ÛØ±Ø§ÙÛØ§Ù Ø³Ø§Ú©Ù Ø§ÛØ±Ø§Ù Ù Ø§ÛØ±Ø§ÙÛØ§Ù ÙÙÛÙ Ø®Ø§Ø±Ø¬ Ø§Ø² Ú©Ø´ÙØ± ØªÙÙØ§ Ø¨Ø§ ÛÚ©ÛâØ´Ø¯Ù Ù Ø§ØªØ­Ø§Ø¯ ÙÛâØªÙØ§ÙÙØ¯ Ø¨Ù ÙÙÙ ÙØ§Û ÙÙÙÙÛØª Ø¨Ø±Ø³ÙØ¯!"
        
        let d = a + b + c
        
        qaQastions.append(QA(title: "ÙÛâÛÙâÙØ³ØªØ± Ø¨Ù ÚÙ ÙØ¹ÙØ§Ø³ØªØ", description: d))
        
        
        
        a = "Ø¨ÙÙ Û±Û°Û°Ùª. ÙÛÙÙØ³ØªØ± Ø§Ø² Ø·Ø±ÛÙ Ø´Ø¨Ú©Ù Ú¯Ø³ØªØ±Ø¯Ù Û²Û° ÙØ²Ø§Ø± ÙÙØ±Û Ø®ÙØ¯ ÙØ§Ø¯Ø± Ø®ÙØ§ÙØ¯ Ø¨ÙØ¯ ØªØ§ Ø¨Ø±Ø§Û ÙØ¬ÙÙØ¹ÙâÙØ§Û Ø´ÙØ§ Ø¨Ø§Ø²Ø§Ø±ÛØ§Ø¨Û ÙÙØ§ÛØ¯ Ù Ø¢ÙÙØ§ Ø±Ø§ Ø§Ø² Ø·Ø±ÛÙ Ø³Ø§ÙØ§ÙÙ ÙØ¯ÛØ±ÛØª Ù¾Ø±Ø¯Ø§Ø®Øª Ø­Ø±ÙÙâØ§Û Ø®ÙØ¯ Ø¨ÙØ±ÙØ´ Ø¨Ø±Ø³Ø§ÙØ¯."
        b = "Ø¯Ø± ÙØ´Øª Ø³Ø§Ù Ú¯Ø°Ø´ØªÙØ Ø³Ø§ÙØ§ÙÙ Ø¢ÙÙØ²Ø´ Ù ØªÙØ³Ø¹Ù Ø´Ø±Ú©Øª Ø±Ø§ÙØ§Ø¨Ø³ Ø³ÛØ³ØªÙ MeetNeed.ir Ø­Ø¬Ù Ø§ÙØ¨ÙÙÛ Ø§Ø² ÙÛØ§Ø²ÙØ§Û Ø¢ÙÙØ²Ø´Û Ù Ø¯Ø§ÙØ´Û Ú©Ø§Ø±Ø¨Ø±Ø§Ù Ø®ÙØ¯ Ø±Ø§ Ø´ÙØ§Ø³Ø§ÛÛ Ù Ø¢ÙÙØ§ Ø±Ø§ ØªØ¬Ø²ÛÙ Ù ØªØ­ÙÛÙ ÙÙÙØ¯Ù Ø§Ø³Øª. Ø§ÛÙ ÙÛØ§Ø²ÙØ§ Ú©Ù Ø¹ÙØ¯ØªØ§ ØªÙØ³Ø· Ø´Ø±Ú©ØªâÙØ§Ø Ø³Ø§Ø²ÙØ§ÙâÙØ§ Ù Ø¯Ø§ÙØ´Ø¬ÙÛØ§Ù ØªÙÙÛØ¯ Ø´Ø¯Ù Ø§Ø³Øª Ø§Ø² Ø·Ø±ÛÙ ÙØ¬ÙÙØ¹ÙâÙØ§ Ù ÙØ´Ø§Ø±Ú©ØªâÙØ§Û ØªÙÙÛØ¯Ø´Ø¯Ù Ø¯Ø± ÙÛÙÙØ³ØªØ± Ø¨Ø±Ø¢ÙØ±Ø¯Ù Ø®ÙØ§ÙØ¯ Ø´Ø¯"
        
        qaQastions.append(QA(title: "Ø¢ÛØ§ ÙÙ ÙØ§ÙØ¹Ø§ ÙÛâØªÙØ§ÙÙ Ø§Ø² ÙÛÙÙØ³ØªØ± Ø¯Ø±Ø¢ÙØ¯ Ø¯Ø§Ø´ØªÙ Ø¨Ø§Ø´ÙØ", description: a + b))
        
        
        qaQastions.append(QA(title: "ÙÛÙÙØ³ØªØ± ÙØªØ¹ÙÙ Ø¨Ù Ú©ÛØ³ØªØ", description: "ÙÙØ±Ø§Ù Ø´ÙÛØ¹Û Ù Ø±Ø³ÙÙ Ø¨ÙÙÙÛ - Ø³Ø§Ú©ÙÛÙ ÙÙØ¨ÙØ±Ù Ø§Ø³ØªØ±Ø§ÙÛØ§ - Ø§Ø² ÙÙØ³Ø³Ø§Ù Ø§ÙÙÛÙ ÙÛÙÙØ³ØªØ± ÙØ³ØªÙØ¯ . Ú©ÙÛÙ Ø§ÙÙØ± ÙØ±ØªØ¨Ø· Ø¨Ø§ ØªÙØ³Ø¹Ù ÙÙÛ ÙÛÙÙØ³ØªØ± ØªÙØ³Ø· ØªÛÙ ØªÙØ³Ø¹Ù Ø±Ø§ÙØ§Ø¨Ø³ Ø³ÛØ³ØªÙ Rafabece.ir ØªÙØ³Ø¹Ù Ù Ù¾Ø´ØªÛØ¨Ø§ÙÛ ÙÛâØ´ÙØ¯"))
        qaQastions.append(QA(title: "ÙÛâÛÙâÙØ³ØªØ± Ø¨Ø§ ÚÙ ÙÙØ§ÙØ±Û ØªÙÙÛØ¯ Ø´Ø¯Ù Ø§Ø³ØªØ", description: "ÙØ§ Ø§Ø² ÙØ±ÛÙÙØ±Ú© CodeIgniter Ø¨Ø±Ø§Û ØªÙØ³Ø¹Ù ÙÛÙÙØ³ØªØ± Ø§Ø³ØªÙØ§Ø¯Ù Ú©Ø±Ø¯ÙâØ§ÛÙ. Ø²Ø¨Ø§ÙâÙØ§Û Ø¨Ø±ÙØ§ÙÙâÙÙÛØ³Û PHP, Javascript Ù ÙÙØ§ÙØ±Û AJAX Ø¨Ø±Ø§Û ØªÙØ³Ø¹Ù Ø¨Ú©ÙØ¯ Ù ÙØ±ÙÙØªâØ§ÙØ¯ Ø§ÛÙ ÙØ¨âØ§Ù¾ Ø§Ø³ØªÙØ§Ø¯Ù Ø´Ø¯Ù Ø§Ø³Øª. Ø§Ú¯Ø± ØªÙØ§ÛÙ Ø¯Ø§Ø±ÛØ¯ Ø¨Ø±Ø§Û ØªÙØ³Ø¹Ù Ø§ÛÙ Ø³Ø§ÙØ§ÙÙ Ù ÙÙÚÙÛÙ ØªÙØ³Ø¹Ù Ø§Ù¾âÙØ§Û Ø§ÙØ¯Ø±ÙÛØ¯ Ù iOS Ø¨Ù ÙØ§ ÙÙØ­Ù Ø´ÙÛØ¯Ø ÙØ·ÙØ§ ÙÛÙÚ© Ø²ÛØ± Ø±Ø§ ÙÙØ§Ø­Ø¸Ù ÙØ±ÙØ§Ø¦ÛØ¯ . ÙÙÙØ¹ÛØªâÙØ§Û Ø´ØºÙÛ Ø±Ø§ÙØ§Ø¨Ø³ Ø³ÛØ³ØªÙ"))
        
        
        a = "Ø¯Ø± ÙØ§Ø²ÙØ§Û Ø¢ØªÛ Ø§ÛÙ Ù¾Ø±ÙÚÙØ Ø§Ù¾ ÙØ§Û Ø§ÙØ¯Ø±ÙÛØ¯ Ù iOS ÙÛÙÙØ³ØªØ± ØªÙØ³Ø¹Ù Ø®ÙØ§ÙØ¯ ÛØ§ÙØª."
        b = "\n"
        c = "Ø¶ÙÙØ§Ø Ú©Ø§Ø±Ø¨Ø±Ø§Ù Ø¹ÙØ§ÙÙ Ø¨Ø± ÙØ±ÙØ´ ÙØ¬ÙÙØ¹Ù ÙØ§ ÙØ§Ø¯Ø± Ø®ÙØ§ÙÙØ¯ Ø¨ÙØ¯ ØªØ§ ÙØ´Ø§Ø±Ú©Øª ÙØ§Û Ø®ÙØ¯ Ø±Ø§ ÙÛØ² Ø¨Ù ØµÙØ±Øª Ø§ÙÙØ±Ø§Ø¯Û Ø¨Ù ÙØ±ÙØ´ Ø¨Ø±Ø³Ø§ÙÙØ¯. ÙÙÚÙÛÙØ Ú©Ø§Ø±Ø¨Ø±Ø§Ù ÙØ§Ø¯Ø± Ø®ÙØ§ÙÙØ¯ Ø¨ÙØ¯ Ø¹ÙØ§ÙÙ Ø¨Ø± Ø§Ø´Ø®Ø§ØµØ ÙØ¬ÙÙØ¹Ù ÙØ§ Ø±Ø§ ÙÛØ² Ø±ØµØ¯ Ú©ÙÙØ¯."
        qaQastions.append(QA(title: "ÙØ§Ø²ÙØ§Û Ø¢ØªÛ ÙÛÙÙØ³ØªØ± ÚÙ ÙØ³ØªÙØ¯Ø", description: a + b + c))
        
        
        a = "ÙÙâØªÙÙØ§ ÙØ¯ÛØ±ÛØª Ø¨Ø±ÚØ³Ø¨âÙØ§ Ú©ÙÚ© ÙÛâÚ©ÙØ¯ ØªØ§ ÙØ´Ø§Ø±Ú©ØªâÙØ§ Ù ÙØ¬ÙÙØ¹ÙâÙØ§Û ÙØ´Ø§Ø¨Ù Ø¯Ø± Ú©ÙØ§Ø± ÛÚ©Ø¯ÛÚ¯Ø± ÙÙØ§ÛØ´ Ø¯Ø§Ø¯Ù Ø´ÙØ¯Ø Ø¨ÙÚ©Ù ÙÛÙÙØ³ØªØ± Ù¾Ø³ Ø§Ø² Ø§Ø¶Ø§ÙÙâØ´Ø¯Ù ÛÚ© Ø¨Ø±ÚØ³Ø¨ ÙØªÙØ§Ø³Ø¨ Ø¨Ø§ ÙÙØ¹ Ø¢Ù - Ø´Ø±Ú©Øª ÛØ§ Ø´Ø®Øµ ÛØ§ ÙÙØ§Ø±Øª - Ø¢Ù Ø±Ø§ Ø¨Ù ÙÙØ§Ø¨Ø¹ Ø´ÙØ§ Ø§Ø¶Ø§ÙÙ ÙÛ Ú©ÙØ¯"
        b = "\n"
        c = "Ø¨Ù Ø¹Ø¨Ø§Ø±Øª Ø¯ÛÚ¯Ø± ÙØ§ ÙØ¹ØªÙØ¯ ÙØ³ØªÛÙ Ø¨Ø±Ø§Û Ø§Ø±ØªÙØ§ Ø¯Ø± ÙØ³ÛØ± Ø´ØºÙÛ ÙÙØ§Ø¨Ø¹ Ø´Ø®Øµ Ø¨Ø§ÛØ¯ ØªÙÙÛØª Ú¯Ø±Ø¯Ø¯. Ø§ÛÙ ÙÙØ§Ø¨Ø¹ Ø´Ø§ÙÙ ÙÙØ§Ø±ØªâÙØ§Û Ø´Ø®ØµØ Ø´Ø±Ú©ØªâÙØ§ÛÛ Ú©Ù Ø´Ø®Øµ Ø¯Ø± Ø­ÙØ²Ù ÙØ¹Ø§ÙÛØª Ø®ÙØ¯ ÙÛâØ´ÙØ§Ø³Ø¯ Ù ÙÙÚÙÛÙ Ø§ÙÚ¯ÙÙØ§ÛÛ Ø§Ø³Øª Ú©Ù Ø´Ø®Øµ Ø§Ø² Ø¢ÙÙØ§ Ø§ÛØ¯Ù ÙÛâÚ¯ÛØ±Ø¯"
        qaQastions.append(QA(title: "ÙØ¯ÛØ±ÛØª Ø¨Ø±ÚØ³Ø¨âÙØ§ ÚÛØ³ØªØ", description: a + b + c))
        return qaQastions
    }
    
    
    
}
